#!/usr/bin/env perl
#
#  Process .adoc manpage files and generate JSON file for use by
#   flux-help(1) command default list of commands. By default, any lines:
#
#   // flux-help-[key]: value
#
#   are output directly into JSON object as `"key": "value"` for the
#   current command entry with the exception of `flux-help-include:`
#   which is used to explicitly include the command in `flux-help(1)`
#   output, but use autogenerated data for other keys.
#
#   The keys:
#     "command": shortname 
#     "description": short description
#
#   are autogenerated from the asciidoc manpage. If the name/description
#   is to be overridden, then `flux-help-command` and `flux-help-description`
#   can be used.
#
# If no `flux-help-*` tags appear in an adoc file, it is ignored.
#
use strict;
use warnings;
use Getopt::Long qw/ :config gnu_getopt /;

my $opts = {};
my $rc = GetOptions ($opts, 'category|c=s');

die "Usage: $0 --category=[label] FILES...\n" if !$#ARGV or !$rc;

print ("[\n");
my $filecount = 0;

for my $file (@ARGV) {
    my %h = ();
    my %data = ();

    $data{category} = $opts->{category} if ($opts->{category});

    ($data{basename}) = $file =~ m/flux-(.*).adoc/;

    open (FILE, "$file") or die ("can't open $file: $@\n");

    while (<FILE>) {
        if (m|// *flux-help-(\S+)\s*: *(.*)\s*$|) {
            $h{$1} = $2;
        }
        if (m|^NAME| && <FILE> =~ m|^----|) {
            <FILE> =~ m/^\s*flux-(.+)\s+-\s*(.+\S)/;
            $data{"command"} = $1;
            $data{"description"} = $2;
        }
    }
    next unless keys %h;

    $h{command} = $data{command} if not $h{command};
    $h{description} = $data{description} if not $h{description};
    $h{category} = $data{category} if $data{category} and not $h{cateegory};

    print (",\n") if ($filecount++);
    print ("  {\n");
    my $n = 0;

    for my $key (sort keys %h) {
        next if $key eq "include";
        print (",\n") if $n++;
        printf ("    \"%s\": \"%s\"", $key, $h{$key});
    }
    printf ("\n  }");
}

print ("\n]");
print ("\n");

# vi: ts=4 sw=4 expandtab
